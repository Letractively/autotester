<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>